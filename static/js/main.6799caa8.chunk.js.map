{"version":3,"sources":["config/index.js","Graph.js","App.js","serviceWorker.js","index.js"],"names":["dotenv","config","Graphs","props","React","useState","visible","setVisible","message","setMessage","data","setData","verifiedTweets","setVerifiedTweets","mostRetweets","setMostRetweets","loading","setLoading","useEffect","a","Axios","get","process","headers","auth","username","password","tweets","Array","isArray","locationObj","forEach","tweet","user","location","groupedData","Object","keys","map","o","value","name","verifiedTweetsObj","tw","verified","t","retweetCount","retweet_count","error","setTimeout","Snackbar","open","autoHideDuration","CircularProgress","size","Typography","variant","style","textAlign","width","height","dataKey","strokeDasharray","fill","Container","nameKey","cx","cy","innerRadius","outerRadius","label","midAngle","RADIAN","Math","PI","radius","x","cos","y","sin","textAnchor","dominantBaseline","filter","m","margin","top","right","left","bottom","type","stroke","Boolean","window","hostname","match","ReactDOM","render","StrictMode","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.6799caa8.chunk.js","sourcesContent":["import dotenv from \"dotenv\";\ndotenv.config();\n\nexport const USERNAME = process.env.REACT_APP_USERNAME;\n\nexport const PASSWORD = process.env.REACT_APP_PASSWORD;\n\nexport const API_URL = process.env.REACT_APP_API_URL;","import React from \"react\";\nimport Axios from \"axios\";\nimport { Snackbar, Typography, Container } from \"@material-ui/core\";\nimport {\n  BarChart, XAxis, YAxis, Bar, Tooltip, Legend, CartesianGrid,\n  Line, LineChart, Pie, PieChart\n} from 'recharts';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\n\nimport { API_URL, USERNAME as username, PASSWORD as password } from \"./config\";\n\nexport const Graphs = props => {\n  const [visible, setVisible] = React.useState(false);\n  const [message, setMessage] = React.useState(\"\");\n  const [data, setData] = React.useState([]);\n  const [verifiedTweets, setVerifiedTweets] = React.useState([]);\n  const [mostRetweets, setMostRetweets] = React.useState([]);\n  const[loading, setLoading] = React.useState(false);\n\n  React.useEffect(() => {\n    (async () => {\n      try {\n        setLoading(true);\n        const { data: tweets } = await Axios.get(API_URL, {\n          headers: {\n            \"content-type\": \"application/json\",\n          }, auth: { username, password }\n        });\n        if (Array.isArray(tweets)) {\n          const locationObj = {};\n          tweets.forEach(tweet => {\n            if (tweet.user.location) {\n              locationObj[tweet.user.location] = locationObj[tweet.user.location] ?\n                locationObj[tweet.user.location] + 1 : 1;\n            } else {\n              locationObj[\"Unknown\"] = locationObj[\"Unknown\"] ? locationObj[\"Unknown\"] + 1 : 1;\n            }\n          });\n          const groupedData = Object.keys(locationObj).map((o) => ({ value: locationObj[o], name: o }));\n\n          setData(groupedData);\n\n          const verifiedTweetsObj = {};\n          tweets.forEach((tw) => {\n            if (tw.user.verified) {\n              verifiedTweetsObj[\"verified\"] = verifiedTweetsObj[\"verified\"] ? ++verifiedTweetsObj[\"verified\"] : 1\n            } else {\n              verifiedTweetsObj[\"Non-Verified\"] = verifiedTweetsObj[\"Non-Verified\"] ? ++verifiedTweetsObj[\"Non-Verified\"] : 1\n            }\n          });\n          setVerifiedTweets(Object.keys(verifiedTweetsObj).map((o) => ({ value: verifiedTweetsObj[o], name: o })));\n          setMostRetweets(tweets.map((t) => ({name: t.user.location || \"unknown\", retweetCount: t.retweet_count})));\n          setLoading(false);\n        }\n      } catch (error) {\n        setVisible(true);\n        setLoading(false);\n        setMessage(error.message ?.error || \"Error occured\");\n        setTimeout(() => {\n          setVisible(false);\n          setMessage(\"\");\n        }, 3000)\n      }\n    })()\n  }, [])\n\n  return (\n    <>\n      <Snackbar\n        message={message}\n        open={visible}\n        autoHideDuration={2000}\n      />\n      {\n        loading ? <CircularProgress  size={200}/> : <> \n              <>\n        <Typography variant=\"h4\" style={{ textAlign: \"center\" }}>Tweets by Location</Typography>\n        <BarChart width={900} height={250} data={data}>\n          <XAxis dataKey=\"name\" />\n          <YAxis />\n          <Legend />\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <Bar dataKey=\"value\" fill=\"#8884d8\" />\n          <Tooltip />\n        </BarChart>\n      </>\n\n      <Container>\n        <Typography variant=\"h4\" style={{ textAlign: \"center\" }}>Tweets by Verified users</Typography>\n        <PieChart width={730} height={250}>\n          <Pie\n            data={verifiedTweets}\n            dataKey=\"value\" nameKey=\"name\" cx=\"50%\" cy=\"50%\" innerRadius={60} outerRadius={80} fill=\"#82ca9d\"\n            label={({\n              cx,\n              cy,\n              midAngle,\n              innerRadius,\n              outerRadius,\n              value,\n              name\n            }) => {\n              const RADIAN = Math.PI / 180;\n              // eslint-disable-next-line\n              const radius = 25 + innerRadius + (outerRadius - innerRadius);\n              // eslint-disable-next-line\n              const x = cx + radius * Math.cos(-midAngle * RADIAN);\n              // eslint-disable-next-line\n              const y = cy + radius * Math.sin(-midAngle * RADIAN);\n\n              return (\n                <text\n                  x={x}\n                  y={y}\n                  fill=\"#8884d8\"\n                  textAnchor={x > cx ? \"start\" : \"end\"}\n                  dominantBaseline=\"central\"\n                >\n                  {name} {value}\n                </text>\n              );\n            }}\n          />\n        </PieChart>\n      </Container>\n\n      <Container>\n        <Typography variant=\"h4\" style={{ textAlign: \"center\" }}> Most Retweets by location</Typography>\n        <LineChart width={730} height={250} data={mostRetweets.filter((m) => m.retweetCount > 50)}\n          margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"name\" />\n          <YAxis />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"retweetCount\" stroke=\"#8884d8\" />\n        </LineChart>\n      </Container>\n        \n        </>\n      }\n    </>\n  );\n\n}\n","import React from \"react\";\nimport {Graphs} from \"./Graph\";\n\nexport default (props) => {\n  return (\n    <>\n      <Graphs />\n    </>\n  )\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}